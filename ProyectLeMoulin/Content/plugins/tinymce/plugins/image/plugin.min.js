tinymce.PluginManager.add("image", function (e) { function t() { var t, n, r = e.dom, i = e.selection.getNode(); var s, o, u; t = e.windowManager.open({ title: "Image Manager", data: n, classes: "tinyfilemanager.net", file: tfm_path + "/dialog.aspx?type=1&editor=" + e.id + "&lang=" + tinymce.settings.language, filetype: "image", width: 900, height: 600, inline: 1 }) } function n() { function n() { var t = [{ text: "None", value: "" }]; return tinymce.each(e.settings.image_list, function (e) { t.push({ text: e.text || e.title, value: e.value || e.url, menu: e.menu }) }), t } function r(e) { var t, n, r, i; t = u.find("#width")[0], n = u.find("#height")[0], r = t.value(), i = n.value(), u.find("#constrain")[0].checked() && f && l && r && i && (e.control == t ? (i = Math.round(r / f * i), n.value(i)) : (r = Math.round(i / l * r), t.value(r))), f = r, l = i } function i() { function t(t) { t.onload = t.onerror = function () { t.onload = t.onerror = null, e.selection.select(t), e.nodeChanged() } } var n = u.toJSON(); "" === n.width && (n.width = null), "" === n.height && (n.height = null), "" === n.style && (n.style = null), n = { src: n.src, "class": "img-responsive", alt: n.alt, width: n.width, height: n.height, style: n.style }, p ? h.setAttribs(p, n) : (n.id = "__mcenew", e.insertContent(h.createHTML("img", n)), p = h.get("__mcenew"), h.setAttrib(p, "id", null)), t(p) } function s(e) { return e && (e = e.replace(/px$/, "")), e } function o() { function e(e) { return e.length > 0 && /^[0-9]+$/.test(e) && (e += "px"), e } var t = u.toJSON(), n = h.parseStyle(t.style); delete n.margin, n["margin-top"] = n["margin-bottom"] = e(t.vspace), n["margin-left"] = n["margin-right"] = e(t.hspace), n["border-width"] = e(t.border), u.find("#style").value(h.serializeStyle(h.parseStyle(h.serializeStyle(n)))) } var u, a, f, l, c, h = e.dom, p = e.selection.getNode(); f = h.getAttrib(p, "width"), l = h.getAttrib(p, "height"), "IMG" != p.nodeName || p.getAttribute("data-mce-object") ? p = null : a = { src: h.getAttrib(p, "src"), alt: h.getAttrib(p, "alt"), width: f, height: l }, e.settings.image_list && (c = { name: "target", type: "listbox", label: "Image list", values: n(), onselect: function (e) { var t = u.find("#alt"); (!t.value() || e.lastControl && t.value() == e.lastControl.text()) && t.value(e.control.text()), u.find("#src").value(e.control.value()) } }); var d = [{ type: "container", layout: "flex", classes: "combobox has-open", label: "Image", direction: "row", items: [{ name: "upl_img", type: "button", classes: "btn open", icon: "browse", onclick: t, tooltip: "Upload image" }, { name: "src", type: "textbox", filetype: "image", size: 20, classes: "img_" + e.id, autofocus: true }] }, c, { name: "alt", type: "textbox", label: "Descr." }, { type: "container", label: "Dim.", layout: "flex", direction: "row", align: "center", spacing: 0, items: [{ name: "width", type: "textbox", maxLength: 3, size: 3, onchange: r }, { type: "label", text: "x" }, { name: "height", type: "textbox", maxLength: 3, size: 3, onchange: r }] }]; e.settings.image_advtab ? (p && (a.hspace = s(p.style.marginLeft || p.style.marginRight), a.vspace = s(p.style.marginTop || p.style.marginBottom), a.border = s(p.style.borderWidth), a.style = e.dom.serializeStyle(e.dom.parseStyle(e.dom.getAttrib(p, "style")))), u = e.windowManager.open({ title: "Edit image", data: a, bodyType: "tabpanel", body: [{ title: "General", type: "form", items: d }, { title: "Advanced", type: "form", pack: "start", items: [{ label: "Style", name: "style", type: "textbox" }, { type: "form", layout: "grid", packV: "start", columns: 2, padding: 0, alignH: ["left", "right"], defaults: { type: "textbox", maxWidth: 50, onchange: o }, items: [{ label: "Vertical space", name: "vspace" }, { label: "Horizontal space", name: "hspace" }, { label: "Border", name: "border" }] }] }], onSubmit: i })) : u = e.windowManager.open({ title: "Edit image", data: a, body: d, onSubmit: i }) } e.addButton("image", { icon: "image", tooltip: "Insert/edit image", onclick: n, stateSelector: "img:not([data-mce-object])" }), e.addMenuItem("image", { icon: "image", text: "Insert image", onclick: n, context: "insert", prependToContext: !0 }) })